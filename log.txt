player_names.cpp - finds all the player names in the given data set; outputs the data to player_names.txt
sordata.cpp - sorts the data; outputs the data to sorted_2015_data.txt 
elo_system.cpp - main program
prediction.cpp - final step; finds predictions

test programs:
map_ratings.cpp - finds whether players have different ratings for different maps

txt files:
data.txt - all of the unsorted match data
map_ratings.txt - gives the difference between map ratings of a player
player_names.txt - gives all the names of the players in data.txt
player_stats - NORMALLY gives the recent 30 games of a player to find the mean/sd of in prediction.cpp
results.txt - gives the probability of one team beating the other
sorted_total_data.txt - all of the sorted data from data.txt
teams.txt - gives the teams to find predictions for


2-15-16
//split elosystem.cpp to include sortdata.cpp
//deleted pn1 and pn2 -> only include 5 players per team; potential bug if there is only 4 players in a team (fixed)
//to find the average score for a team, use a total of 150 ratings from the 5 players?

2-16-16
// finished updating elosystem.cpp to a simpler program

2-17-16
// made a 2samplettest.cpp from elosystem.cpp
// done, 64.5% accuracy
// fixed bug in elosystem.cpp
// task: change from using elo system ratings to game scores in player_stats.txt

2-18-16
// what makes the higher level players get consistently better scores than lower level players?
// people that play the same game vs. people that play different games
// Tried:
// team_average[1] * rounds won
// actual_score * team_average[1]

2-28-16
// tried a linear regression with player ratings and weighted scores
// worked better with post-changed ratings and weighted scores
// when using pre-changed ratings, the scatter plot showed a circular plot of points

3-27-16
// found cdf function and P(X>Y)
// moving density_curve_percentage.cpp to elosystem.cpp

3-29-16
// best k =~0.871 for linear regression at games past 3000 maxz=1.64558; maxz went up immediately after increasing k
// also k =~0.6 has another minimum for maxz at games past 6000 maxz=1.49914 for linear regression
// best k =~0.974 for log regression at games past 3000 maxz=1.67202
// best k =~0.3 for log regression at games past 6000 maxz=1.07

3-31-16
// finished program
// decide on the percentage difference to bet = difference in percentage/2

4-1-16
// improve elosytem:
// Brier score: >0.22
// add player kills, assists, deaths to actual_score
// add factor time into importance of ratings
// add ratings for each indiviual map

4-3-16
// 0.1 0.227117
0.2 0.226769
0.3 0.227003
0.4 0.227365
0.5 0.227763
0.6 0.228176
0.7 0.228608
0.8 0.229066
0.9 0.229556
1 0.230083

4-3-16
// trimmed mean by 10 on each side // minor improvement
0.1 0.226479
0.2 0.226219
0.3 0.22645
0.4 0.226812
0.5 0.227214
0.6 0.227681
0.7 0.228169
0.8 0.228671
0.9 0.229178
1 0.229716

// take own team's rating into account
// checking if player map ratings are different from one another

4-4-16
// trimmed mean by 10 on each side // used e instead of 10 for expected_rating
0.1 0.225057 3141
0.2 0.224882 3141
0.3 0.224936 3141
0.4 0.225029 3141
0.5 0.225156 3141
0.6 0.225338 3141
0.7 0.225548 3141
0.8 0.225772 3141
0.9 0.226021 3141
1 0.226285 3141

4-5-16
// everything with absolute man instead of standard deviation
0.1 0.224425 3141
0.2 0.224126 3141
0.3 0.224179 3141
0.4 0.224303 3141
0.5 0.224491 3141
0.6 0.224725 3141
0.7 0.224982 3141
0.8 0.225248 3141
0.9 0.22553 3141
1 0.225815 3141

4-7-16
// trying to weight the recent scores by date

4-15-16
// split elosystem.cpp into revised functions
// bug on match_number 7573, something wrong with scores[x] of team 2, x=13, 43...
// cache TheMongolz 7575
0.349985

13
0.302378 321
0.235713 321
0.178916 321
0.615304 321
0.444426 321
0.599599 322
0.467219 322
0.623684 322
0.605085 322
0.366962 322
0.605358 322
0.390962 322
0.349985 394
0.366439 266
0.256163 266
0.403833 266
0.570577 266
0.468547 266
0.307275 268
0.207039 268
0.183971 275
0.243596 276
0.469302 288
0.421047 290
0 317
0.313645 317
0.509846 317
0.452953 319
0.288202 319
0.327934 320

4-17-16
// finished debugging elosystem_revised.cpp